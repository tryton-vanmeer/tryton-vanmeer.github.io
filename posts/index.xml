<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tryton Van Meer</title>
    <link>https://trytonvanmeer.dev/posts/</link>
    <description>Recent content in Posts on Tryton Van Meer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://trytonvanmeer.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shells on the Beach ü¶Ä üèñÔ∏è üêü</title>
      <link>https://trytonvanmeer.dev/posts/shells-on-the-beach/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/shells-on-the-beach/</guid>
      <description>Here are some of the terminal tools I use, some of which share a certain ocean theme.
Tilix Appropriately, the first item on the list is the terminal I use. Like GNOME&amp;rsquo;s Terminal, it is GTK-based and uses the VTE library. Tilix had a nice CSD headerbar, in accordance to the GNOME HIG, before GNOME Terminal implemented one. Along with more options for tweaking, Tilix has tiling support built in with vertical and horizontal panes.</description>
    </item>
    
    <item>
      <title>NetworkManager dnsmasq - libvirtd</title>
      <link>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq-libvirtd/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq-libvirtd/</guid>
      <description>Once configured, you&amp;rsquo;ll be able to talk to libvirtd VM&amp;rsquo;s using their hostname, rather than having to know the IP address.
Forward DNS requests to libvirt&amp;rsquo;s Domain Libvirt uses it&amp;rsquo;s own built-in dnsmasq instance for serving DHCP and DNS to the VM&amp;rsquo;s in the virtual network.
We&amp;rsquo;ll configure NetworkManager&amp;rsquo;s dnsmasq to forward requests to the libvirt instance.
/etc/NetworkManager/dnsmasq.d/libvirt.conf
server=/vm/192.168.122.1 Now when we try to access hostname.vm, we&amp;rsquo;ll be forwarded to 192.</description>
    </item>
    
    <item>
      <title>NetworkManager dnsmasq - NGINX &#43; Localhost</title>
      <link>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq-nginx-localhost/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq-nginx-localhost/</guid>
      <description>This post serves as an overview of my configs for using domains with my local NGINX instance with SSL/HTTPS.
Forward DNS requests to localhost Create a dnsmasq conf:
/etc/NetworkManager/dnsmasq.d/lh.conf
address=/lh/127.0.0.1 Accessing domain.lh will be forwarded to localhost for NGINX to handle.
Setup a Trusted SSL Certificate I use a self-signed cert so that my localhost pages get a nice Connection secure padlock.
Create /etc/nginx/ssl
OpenSSL Config lh.cnf
[req] default_bits = 2048 distinguished_name = req_distinguished_name prompt = no [req_distinguished_name] C = CA ST = Ontario L = Ottawa O = Localhost CA OU = Development CN = lh [v3_ca] subjectAltName = @alt_names [alt_names] DNS.</description>
    </item>
    
    <item>
      <title>NetworkManager&#39;s dnsmasq plugin</title>
      <link>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/networkmanager-dnsmasq/</guid>
      <description>NetworkManager in conjuntion with it&amp;rsquo;s built-in local instance of dnsmasq allows for more advanced DNS configuration and opens up some usefull functionality.
Enable NetworkManager&amp;rsquo;s dnsmasq Plugin Create a configuration file in /etc/NetworkManager/conf.d with the following:
[main] dns=dnsmasq You can now create files in /etc/NetworkManager/dnsmasq.d for configuring dnsmasq.
After all the configuration is done, restart NetworkManager.
$ systemctl restart NetworkManager $ cat /etc/resolv.conf # Generated by NetworkManager nameserver 127.0.0.1 What to Configure Next  libvirtd NGINX + localhost  </description>
    </item>
    
    <item>
      <title>Adding SSH Keys</title>
      <link>https://trytonvanmeer.dev/posts/adding-ssh-keys/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/adding-ssh-keys/</guid>
      <description>Just some notes about provisioning machines with SSH keys.
Copy with ssh-copy-id If you have ssh access to the machine with a password, you can use ssh-copy-id.
$ ssh-copy-id user@host # or to specify the key $ ssh-copy-id -i ~/.ssh/mykey user@host Using Git Platforms Both GitHub and GitLab allow you to grab a users public SSH keys.
You can grab them like so:
$ curl https://github.com/&amp;lt;username&amp;gt;.keys $ curl https://gitlab.com/&amp;lt;username&amp;gt;.keys # And I would: $ curl https://github.</description>
    </item>
    
    <item>
      <title>YubiKey</title>
      <link>https://trytonvanmeer.dev/posts/yubikey/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/yubikey/</guid>
      <description>Notes about setting up a YubiKey on Linux (Arch Linux / Fedora).
Packages Install the following packages:
Arch Linux $ sudo pacman -S pam-u2f yubikey-manager libfido2  Make sure pcscd.service (PC/SC Smart Card Daemon) is enabled on Arch Linux.
 Fedora $ sudo dnf install pam-u2f yubikey-manager libfido2 pamu2fcfg PAM Create /etc/u2f_keys and append the output of pamu2fcfg to it.
pamu2fcfg -n will create the same output without a username. This is usefull for appending additional keys.</description>
    </item>
    
    <item>
      <title>OpenRGB</title>
      <link>https://trytonvanmeer.dev/posts/openrgb/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/openrgb/</guid>
      <description>OpenRGB is amazing open source software, that supports Windows and Linux, for managing your computers RGB lighting. It doesn&amp;rsquo;t depend on the software of manufacturers, and allows you to control the RGB lighting where previously you might not have before on Linux.
OpenRGB gives you the ability to save and load profiles. This can be done in the GUI or through the CLI using openrgb --profile filename.orp.
You can also programmatically configure devices on the CLI.</description>
    </item>
    
    <item>
      <title>Running Services on Login with systemd</title>
      <link>https://trytonvanmeer.dev/posts/running-services-on-login-with-systemd/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/running-services-on-login-with-systemd/</guid>
      <description>systemd is great for managing system services, so why not extend its capabilities to running things on login. Doing this allows you to take advantage of systemd&amp;rsquo;s features like restarting on failure for long-running daemons, or using slices/cgroups for resource managment.
My unit files are simple since I&amp;rsquo;m running oneshot commands.
Your user units are placed in ~/.config/systemd/user and are activated with systemctl --user enable &amp;lt;service&amp;gt;.
The important part of my unit files is the graphical-session.</description>
    </item>
    
    <item>
      <title>Custom Arch Linux Image</title>
      <link>https://trytonvanmeer.dev/posts/custom-arch-linux-image/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/custom-arch-linux-image/</guid>
      <description>One of the tools I like to keep on my toolbelt is a USB drive with some kind of live Linux system. This can be used to show someone Linux, troubleshooting peoples devices, or just arch-chroot&amp;rsquo;ing into my desktop to fix something. Since Arch Linux is my OS of choice, it would be ideal to have an Arch USB. But, this obviously means not having a Desktop Environment to work from.</description>
    </item>
    
    <item>
      <title>Arch Linux with GNOME on the Surface Pro 3</title>
      <link>https://trytonvanmeer.dev/posts/sp3-archlinux-gnome/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/sp3-archlinux-gnome/</guid>
      <description>Recently, I acquired a Surface Pro 3 for a great deal. I was looking for a small computing device and wanted something I could run desktop Linux on, so an Android tablet or Chromebook were out of the race already.
I settled on the SP3 for a couple reasons:
 It has x86 hardware so no issues installing Linux. The SP3, while quite old at this point (released in 2014), has out of the box Linux support.</description>
    </item>
    
    <item>
      <title>Porting Hiritsu to Rust</title>
      <link>https://trytonvanmeer.dev/posts/hiritsu-rust-port/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/hiritsu-rust-port/</guid>
      <description>Hiritsu is a tool I developed to get the resolution and aspect ratio of images. It can also be used to rename an input image to include those attributes in the filename.
An example of this in action:
$ hiritsu wallpaper.jpg Width: 1920 Height: 1080 Ratio: 16:9 $ hiritsu --rename wallpaper.jpg wallpaper (1920x1080) [16:9].jpg The Python version can be found here, and the Rust port here
Benchmarking For this benchmark I used this wallpaper from Wallhaven.</description>
    </item>
    
    <item>
      <title>Fish is Awesome! And tweaking the DNF completion.</title>
      <link>https://trytonvanmeer.dev/posts/fish-is-great-dnf-completion/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/fish-is-great-dnf-completion/</guid>
      <description>A while ago I decided to finally switched to ZSH and give it a try. Got it mostly configured to how I wanted it and was satisfied.
Then a friend mentioned he uses Fish. Well, I&amp;rsquo;m already trying an alternative shell, so why not give Fish a go.
Fish. Is. Awesome.
I&amp;rsquo;ve heard about how great Fish and ZSH were but always stuck to just using Bash. I was now thinking to myself, why didn&amp;rsquo;t I try these earlier.</description>
    </item>
    
    <item>
      <title>Yes, I am a Linux gamer!</title>
      <link>https://trytonvanmeer.dev/posts/yes-i-am-a-linux-gamer/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trytonvanmeer.dev/posts/yes-i-am-a-linux-gamer/</guid>
      <description>Linux is my platform of choice for not only daily computing, but also gaming. And I am happy to say I enjoy it quite a lot.
Steam I might not be able to play all the latest AAA games, but I still have more games to play than I have time. Since I stopped using Windows, I&amp;rsquo;ve also made a point to only buy games that support Linux.
There are currently 416 games in my Steam library.</description>
    </item>
    
  </channel>
</rss>
